{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"529fa2c4-5986-59ec-994a-8020807dddf5","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Server Side NodeJs\"), mdx(\"h2\", null, \"By Elias Hussary\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Agenda\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"History of Node\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Strengths & Weaknesses\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Tour of Server Side Node\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"stdlib http\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"express\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"async patterns\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Fullstack Javascript (SSR)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Demo\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Scaling Node\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Questions\")), mdx(\"hr\", null), mdx(\"h2\", null, \"History of Server Side Javascript & Node\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Node was introduced in 2011 by Ryan Dahl\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Built ontop of Google's V8 runtime (also offered on Chakra)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"C++ bindings makeup the greater part of the NodeJS stdlib\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Allows for general purpose programming\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Great for I/O heavy applications\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Strengths & Weaknesses of NodeJs\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Weaknesses\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Single threaded\", \"*\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"*\", \"applications must be designed to operate in clusters\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Slower than most other languages\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Javascript is dynamically typed; \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"more prone to sloppy code and trivial errors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use typescript\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"stdlib lacks in many ways, encourages the use of NPM\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"NPM\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"code from these packages are sometimes questionable\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"huge attack vector\")))), mdx(\"hr\", null), mdx(\"h3\", null, \"Strengths\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Asynchronous by nature; \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"great for I/O driven applications (servers)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Full stack web applications now in Javascript\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"great for MVPs and prototyping\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"increases productivity, less context switching for devs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"faster dev time promoting iterative feedback loops early\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Thriving package ecosystem via Node Package Manager (npm)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Allows for Server Side Rendered SPA's\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"NPM\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"there is a module for everything\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"A Tour of Node\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"stdlib http server\\\" file=\\\"../1.0-stdlib-http/src/index.ts\\\"\",\n    \"title\": \"\\\"stdlib\",\n    \"http\": true,\n    \"server\\\"\": true,\n    \"file\": \"\\\"../1.0-stdlib-http/src/index.ts\\\"\"\n  }), \"import http from \\\"http\\\";\\n\\nconst HOSTNAME = \\\"localhost\\\";\\nconst PORT = parseInt(<string>process.env.PORT, 0) || 3000;\\n\\nfunction requestListener(\\n  req: http.IncomingMessage,\\n  res: http.ServerResponse\\n): void {\\n  console.log(\\\"> Request at:\\\", req.url);\\n  res.statusCode = 200;\\n  res.setHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\n  res.end(\\n    JSON.stringify({\\n      message: \\\"Hello World!\\\"\\n    })\\n  );\\n}\\n\\nconst server = http.createServer(requestListener);\\n\\nserver.listen(PORT, HOSTNAME, () => {\\n  console.log(\\\"> Listening on port %s:%s\\\", HOSTNAME, PORT);\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5:19\",\n    \"5:19\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Adding middleware\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"middleware app\\\" subtitle=\\\"./app.ts\\\" file=\\\"../1.1-with-middleware/src/app.ts\\\"\",\n    \"title\": \"\\\"middleware\",\n    \"app\\\"\": true,\n    \"subtitle\": \"\\\"./app.ts\\\"\",\n    \"file\": \"\\\"../1.1-with-middleware/src/app.ts\\\"\"\n  }), \"import http from \\\"http\\\";\\nimport { MiddlewareHandler } from \\\"./types\\\";\\n\\nexport default class App {\\n  private stack: MiddlewareHandler[] = [];\\n\\n  use = (handler: MiddlewareHandler) => {\\n    this.stack.push(handler);\\n    return this;\\n  };\\n\\n  handle: http.RequestListener = (req, res) => {\\n    const context = {\\n      req,\\n      res\\n    };\\n\\n    let idx = -1;\\n    const stack = this.stack;\\n    next();\\n\\n    function next() {\\n      idx += 1;\\n      const handler = stack[idx];\\n      handler(context, next);\\n    }\\n  };\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"5:28 file=\\\"../1.1-with-middleware/src/app.ts\\\"\",\n    \"5:28\": true,\n    \"file\": \"\\\"../1.1-with-middleware/src/app.ts\\\"\"\n  }), \"import http from \\\"http\\\";\\nimport { MiddlewareHandler } from \\\"./types\\\";\\n\\nexport default class App {\\n  private stack: MiddlewareHandler[] = [];\\n\\n  use = (handler: MiddlewareHandler) => {\\n    this.stack.push(handler);\\n    return this;\\n  };\\n\\n  handle: http.RequestListener = (req, res) => {\\n    const context = {\\n      req,\\n      res\\n    };\\n\\n    let idx = -1;\\n    const stack = this.stack;\\n    next();\\n\\n    function next() {\\n      idx += 1;\\n      const handler = stack[idx];\\n      handler(context, next);\\n    }\\n  };\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"9:33 title=\\\"stdlib http server with middleware\\\" subtitle=\\\"./index.ts\\\" file=\\\"../1.1-with-middleware/src/index.ts\\\"\",\n    \"9:33\": true,\n    \"title\": \"\\\"stdlib\",\n    \"http\": true,\n    \"server\": true,\n    \"with\": true,\n    \"middleware\\\"\": true,\n    \"subtitle\": \"\\\"./index.ts\\\"\",\n    \"file\": \"\\\"../1.1-with-middleware/src/index.ts\\\"\"\n  }), \"import http from \\\"http\\\";\\nimport App from \\\"./app\\\";\\nimport { MiddlewareHandler } from \\\"./types\\\";\\n\\n\\nconst HOSTNAME = \\\"localhost\\\";\\nconst PORT = parseInt(<string>process.env.PORT, 0) || 3000;\\n\\nconst app = new App();\\n\\nconst logIncomingRequest: MiddlewareHandler = (ctx, next) => {\\n  console.log(\\\"> Request at:\\\", ctx.req.url);\\n  next();\\n};\\n\\nconst setJsonContentType: MiddlewareHandler = (ctx, next) => {\\n  ctx.res.setHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\n  next();\\n};\\n\\nconst sayHello: MiddlewareHandler = ctx => {\\n  ctx.res.statusCode = 200;\\n  ctx.res.end(\\n    JSON.stringify({\\n      message: \\\"Hello World\\\"\\n    })\\n  );\\n};\\n\\napp\\n  .use(logIncomingRequest)\\n  .use(setJsonContentType)\\n  .use(sayHello);\\n\\nconst server = http.createServer(app.handle);\\n\\nserver.listen(PORT, HOSTNAME, () => {\\n  console.log(\\\"> Listening on port %s:%s\\\", HOSTNAME, PORT);\\n});\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Using Express\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"express hello world\\\" file=\\\"../2.0-express/src/index.ts\\\"\",\n    \"title\": \"\\\"express\",\n    \"hello\": true,\n    \"world\\\"\": true,\n    \"file\": \"\\\"../2.0-express/src/index.ts\\\"\"\n  }), \"import express from \\\"express\\\";\\nimport bodyParser from \\\"body-parser\\\";\\n\\nconst PORT = parseInt(<string>process.env.PORT, 0) || 3000;\\nconst HOSTNAME = \\\"localhost\\\";\\n\\nconst app = express();\\n\\napp\\n  .use(bodyParser.json())\\n  .get(\\\"/\\\", (req, res, next) => {\\n    res.status(200).json({\\n      message: \\\"Go Away!\\\"\\n    });\\n  })\\n  .get(\\\"/hello/:name\\\", (req, res, next) => {\\n    const { name } = req.params;\\n\\n    res.status(200).json({\\n      message: `Hello ${name}`\\n    });\\n  });\\n\\napp.listen(PORT, HOSTNAME, () => {\\n  console.log(\\\"> Listening on port %s\\\", PORT);\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"7:22\",\n    \"7:22\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Async Patterns\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"13:38 title=\\\"Callbacks\\\" file=\\\"../2.1-express-async-patterns/src/routes/1-weatherCallbacks.js\\\"\",\n    \"13:38\": true,\n    \"title\": \"\\\"Callbacks\\\"\",\n    \"file\": \"\\\"../2.1-express-async-patterns/src/routes/1-weatherCallbacks.js\\\"\"\n  }), \"import { callbacks } from \\\"../services/weatherApi\\\";\\nconst {\\n  getLngLatFromIPAddr,\\n  getCityFromLngLat,\\n  getForecast,\\n  transformForecast\\n} = callbacks;\\n\\nfunction handleError(err, res) {\\n  res.status(500).json(err);\\n}\\n\\nexport default function handleGetWeatherCallbacks(req, res, next) {\\n  const ipAddr = req.connection.remoteAddress;\\n\\n  getLngLatFromIPAddr(ipAddr, function(err, lngLat) {\\n    if (err) {\\n      return handleError(err);\\n    }\\n    getCityFromLngLat(lngLat, function(err, city) {\\n      if (err) {\\n        return handleError(err);\\n      }\\n      getForecast(city, function(err, forecast) {\\n        if (err) {\\n          return handleError(err);\\n        }\\n        transformForecast(forecast, function(err, transformedForecast) {\\n          if (err) {\\n            return handleError(err);\\n          }\\n\\n          return res.status(200).json(transformedForecast);\\n        });\\n      });\\n    });\\n  });\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"16:38 subtitle=\\\"callback 'hell'\\\"\",\n    \"16:38\": true,\n    \"subtitle\": \"\\\"callback\",\n    \"'hell'\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Promises & Await\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"13:38 title=\\\"Callbacks\\\" file=\\\"../2.1-express-async-patterns/src/routes/1-weatherCallbacks.js\\\"\",\n    \"13:38\": true,\n    \"title\": \"\\\"Callbacks\\\"\",\n    \"file\": \"\\\"../2.1-express-async-patterns/src/routes/1-weatherCallbacks.js\\\"\"\n  }), \"import { callbacks } from \\\"../services/weatherApi\\\";\\nconst {\\n  getLngLatFromIPAddr,\\n  getCityFromLngLat,\\n  getForecast,\\n  transformForecast\\n} = callbacks;\\n\\nfunction handleError(err, res) {\\n  res.status(500).json(err);\\n}\\n\\nexport default function handleGetWeatherCallbacks(req, res, next) {\\n  const ipAddr = req.connection.remoteAddress;\\n\\n  getLngLatFromIPAddr(ipAddr, function(err, lngLat) {\\n    if (err) {\\n      return handleError(err);\\n    }\\n    getCityFromLngLat(lngLat, function(err, city) {\\n      if (err) {\\n        return handleError(err);\\n      }\\n      getForecast(city, function(err, forecast) {\\n        if (err) {\\n          return handleError(err);\\n        }\\n        transformForecast(forecast, function(err, transformedForecast) {\\n          if (err) {\\n            return handleError(err);\\n          }\\n\\n          return res.status(200).json(transformedForecast);\\n        });\\n      });\\n    });\\n  });\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"13:24 title=\\\"Promises\\\" file=\\\"../2.1-express-async-patterns/src/routes/2-weatherPromises.js\\\"\",\n    \"13:24\": true,\n    \"title\": \"\\\"Promises\\\"\",\n    \"file\": \"\\\"../2.1-express-async-patterns/src/routes/2-weatherPromises.js\\\"\"\n  }), \"import { promises } from \\\"../services/weatherApi\\\";\\nconst {\\n  getLngLatFromIPAddr,\\n  getCityFromLngLat,\\n  getForecast,\\n  transformForecast\\n} = promises;\\n\\nfunction handleError(err, res) {\\n  res.status(500).json(err);\\n}\\n\\nexport default function handleGetWeatherPromises(req, res, next) {\\n  const ipAddr = req.connection.remoteAddress;\\n\\n  getLngLatFromIPAddr(ipAddr)\\n    .then(getCityFromLngLat)\\n    .then(getForecast)\\n    .then(transformForecast)\\n    .then(forecast => {\\n      res.status(200).json(forecast);\\n    })\\n    .catch(handleError);\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"13:24 title=\\\"Promises\\\" file=\\\"../2.1-express-async-patterns/src/routes/2-weatherPromises.js\\\"\",\n    \"13:24\": true,\n    \"title\": \"\\\"Promises\\\"\",\n    \"file\": \"\\\"../2.1-express-async-patterns/src/routes/2-weatherPromises.js\\\"\"\n  }), \"import { promises } from \\\"../services/weatherApi\\\";\\nconst {\\n  getLngLatFromIPAddr,\\n  getCityFromLngLat,\\n  getForecast,\\n  transformForecast\\n} = promises;\\n\\nfunction handleError(err, res) {\\n  res.status(500).json(err);\\n}\\n\\nexport default function handleGetWeatherPromises(req, res, next) {\\n  const ipAddr = req.connection.remoteAddress;\\n\\n  getLngLatFromIPAddr(ipAddr)\\n    .then(getCityFromLngLat)\\n    .then(getForecast)\\n    .then(transformForecast)\\n    .then(forecast => {\\n      res.status(200).json(forecast);\\n    })\\n    .catch(handleError);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"13:26 title=\\\"AsyncAwait\\\" file=\\\"../2.1-express-async-patterns/src/routes/3-weatherAsyncAwait.js\\\"\",\n    \"13:26\": true,\n    \"title\": \"\\\"AsyncAwait\\\"\",\n    \"file\": \"\\\"../2.1-express-async-patterns/src/routes/3-weatherAsyncAwait.js\\\"\"\n  }), \"import { promises } from \\\"../services/weatherApi\\\";\\nconst {\\n  getLngLatFromIPAddr,\\n  getCityFromLngLat,\\n  getForecast,\\n  transformForecast\\n} = promises;\\n\\nfunction handleError(err, res) {\\n  res.status(500).json(err);\\n}\\n\\nexport default async function handleGetWeatherAsyncAwait(req, res, next) {\\n  const ipAddr = req.connection.remoteAddress;\\n\\n  try {\\n    const lngLat = await getLngLatFromIPAddr(ipAddr);\\n    const city = await getCityFromLngLat(lngLat);\\n    const forecast = await getForecast(city);\\n    const transformedForecast = await transformForecast(forecast);\\n\\n    return res.status(200).json(transformedForecast);\\n  } catch (err) {\\n    return handleError(err);\\n  }\\n}\\n\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"Fullstack Javascript\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Server Side Single Page Applications\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Node allows for hybrid web applications\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Client side SPA's can now be used on the server\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Initial render is done on the server\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HTML markup is sent to the client and rehydrated\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This method works with any modern framework\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"React, Angular, Vue, etc.\")))), mdx(\"hr\", null), mdx(\"h3\", null, \"SSR Architecture\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not build monolithic SSR applications\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SSR nodes should be treated as a service\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"Render as a service\\\"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Decouple your data to its own dedicated API service\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Data access should always be over http - \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"even on the server\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"SSR Demo\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"goto \\\"3.0-express-api-server\\\"\\ngoto \\\"3.1-ssr-react\\\"\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Scaling Node\"), mdx(\"p\", null, \"Clusters & Threading\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Clusters\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A cluster consists of forked node processes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The pool of node workers share a single port\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The main proc distributes load using a round robin approach\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All applications should be designed to horizontally scale\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"cluster example\\\"  file=\\\"../4.0-scaling/src/cluster.ts\\\"\",\n    \"title\": \"\\\"cluster\",\n    \"example\\\"\": true,\n    \"\": true,\n    \"file\": \"\\\"../4.0-scaling/src/cluster.ts\\\"\"\n  }), \"const cluster = require(\\\"cluster\\\");\\nconst http = require(\\\"http\\\");\\nconst numCPUs = require(\\\"os\\\").cpus().length;\\n\\nif (cluster.isMaster) {\\n  console.log(`Master ${process.pid} is running`);\\n\\n  // Fork workers.\\n  for (let i = 0; i < numCPUs; i++) {\\n    cluster.fork();\\n  }\\n\\n  cluster.on(\\\"exit\\\", (worker, code, signal) => {\\n    console.log(`worker ${worker.process.pid} died`);\\n  });\\n} else {\\n  // Workers can share any TCP connection\\n  // In this case it is an HTTP server\\n  http\\n    .createServer((req, res) => {\\n      res.writeHead(200);\\n      res.end(\\\"hello world\\\\n\\\");\\n    })\\n    .listen(8000);\\n\\n  console.log(`Worker ${process.pid} started`);\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"Threading\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Similar to clusters with a more general API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Useful for performing \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"CPU\"), \" intensive operations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not use for I/O operations\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Instead stick with regular Asynchronous patterns\")))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"threading example\\\"  file=\\\"../4.0-scaling/src/threading.ts\\\"\",\n    \"title\": \"\\\"threading\",\n    \"example\\\"\": true,\n    \"\": true,\n    \"file\": \"\\\"../4.0-scaling/src/threading.ts\\\"\"\n  }), \"import { Worker, isMainThread } from \\\"worker_threads\\\";\\n\\nif (isMainThread) {\\n  // This re-loads the current file inside a Worker instance.\\n  new Worker(__filename);\\n} else {\\n  console.log(\\\"Inside Worker!\\\");\\n  console.log(isMainThread); // Prints 'false'.\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"End\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","isCreatedByStatefulCreatePages":false,"id":"529fa2c4-5986-59ec-994a-8020807dddf5","slug":"","title":"Server Side NodeJs"}}}